class CourseNode:
    def __init__(self, course_code, course_id, categories, course_title, description, prereq_courses, antireq_courses, prereq_faculties, antireq_faculties, prereq_programs, anti_programs, form, offered_terms, units):
        self.course_code = course_code
        self.course_id = course_id
        self.categories = categories
        self.course_title = course_title
        self.description = description
        self.prereq_courses = prereq_courses
        self.antireq_courses = antireq_courses
        self.prereq_faculties = prereq_faculties
        self.antireq_faculties = antireq_faculties
        self.prereq_programs = prereq_programs
        self.anti_programs = anti_programs
        self.form = form
        self.offered_terms = offered_terms
        self.units = units


CS_courses = {
    "CS100": CourseNode("CS100", "004360", ["LEC"], "Introduction to Computing Through Applications", "Using personal computers as effective problem solving tools for the present and the future. Effective use of spreadsheets to process, manipulate, and visualize numeric and textual information. Introduction to the Internet, World Wide Web, HTML, and XML. Algorithms underlying the functional components of web search engines and their influence on data access. Using wikis to publish, reshape, and organize data collaboratively.", [], ["CS2XX", "CS3XX", "CS4XX"], [], [], ["Mathematics", "Biomedical", "Chemical", "Civil", "Computer & Electrical", "Environmental", "Geological", "Management", "Mechanical", "Mechatronics", "Nanotechnology & Systems Design Eng"], [], ["Online"], ["F","W","S"], 0.5),
    "CS105": CourseNode("CS105", "015054", ["LAB", "LEC", "TST"], "Introduction to Computer Programming 1", "An introduction to the fundamentals of computer programming through media computation. Students will learn to write interactive graphical programs. Fundamental language concepts such as variables, conditionals, loops, functions, and arrays. Programming concepts such as coding style, modular design, testing, and debugging. Media concepts such as 2D graphics drawing, input, animation, and image processing.", [], ["BME121", "CS115", "CS135", "CS137", "CS145", "CHE121", "CIVE121", "ECE150", "MTE121", "GENE121", "NE111", "MSCI121", "PHYS236", "SYDE121"], [], [], [], ["Mathematics"], ["In-person", "Online"], ["F", "W", "S"], 0.5),
    "CS106": CourseNode("CS106", "015055", ["LAB", "LEC", "TST"], "Introduction to Computer Programming 2", "A continuation of the introduction to computer programming begun in CS 105. The use of programming, in conjunction with libraries, as a means of solving practical problems in art, design, and data processing. Basic text processing, manipulation of images and sound, handling and visualization of tabular and hierarchical data. Introductions to user interfaces, physical simulation, and object-oriented programming.", ["CS105"], ["BME121", "CS115", "CS135", "CS137", "CS145", "CHE121", "CIVE121", "ECE150", "MTE121", "GENE121", "NE111", "MSCI121", "SYDE121"], [], [], [], ["Mathematics"], ["In-person", "Online"], ["F", "W", "S"], 0.5),
    "CS114": CourseNode("CS114", "016252", ["LAB", "LEC", "TST", "TUT"], "Principles of Computing for Science", "Introduction to basic imperative programming principles; programming concepts including functions, flow control, lists, arrays; numerical accuracy and efficiency; data analysis and general-purpose algorithms. Introduction to object-oriented programming concepts.", [], ["CS116", "CS135", "CS136", "CS137", "CS138", "CS145", "CS146", "BME121", "CHE120", "CIVE121", "ECE150", "GENE121", "MTE121", "ME101", "MSCI121", "NE111", "PHYS236", "SYDE121"], [], ["Mathematics"], [], [], ["In-person", "Online"], ["F", "W", "S"], 0.5),
    "CS115": CourseNode("CS115", "012765", ["LAB", "LEC", "TST", "TUT"], "Introduction to Computer Science 1", "An introduction to the fundamentals of computer science through the application of elementary programming patterns in the functional style of programming. Function definition and application. Tracing via substitution. Design, testing, and documentation. Recursive data definitions. Lists and trees. Functional and data abstraction.", [], ["BME121", "CS135", "CS137", "CS138", "CS145", "CHE121", "CIVE121", "ECE150", "GENE121", "MTE121", "ME101", "NE111", "MSCI121", "PHYS139", "SYDE121"], [], [], [], [], ["In-person", "Online"], ["F", "W", "S"], 0.5),
    "CS116": CourseNode("CS116", "012766", ["LAB", "LEC", "TST", "TUT"], "Introduction to Computer Science 2", "This course builds on the techniques and patterns learned in CS 115 while making the transition to use of an imperative language. Generative and structural recursion. Mutation (assignment) and its role in an imperative language. Primitive types and basic I/O. Sequencing, selection, looping. Function definition and use. File and console I/O. Issues in computer science.", ["CS115", "CS135", "CS145"], ["CS114", "CS136", "CS137", "CS138", "CS146", "PHYS236", "PHYS239", "MSCI240", "NE111"], [], [], [], [], ["In-person", "Online"], ["F", "W", "S"], 0.5),
    "CS135": CourseNode("CS135", "012040", ["LAB", "LEC", "TST", "TUT"], "Designing Functional Programs", "An introduction to the fundamentals of computer science through the application of elementary programming patterns in the functional style of programming. Syntax and semantics of a functional programming language. Tracing via substitution. Design, testing, and documentation. Linear and nonlinear data structures. Recursive data definitions. Abstraction and encapsulation. Generative and structural recursion. Historical context.", [], ["AE121", "BME121", "CS115", "CS137", "CS138", "CS145", "CIVE121", "ECE150", "ME101", "MSCI121", "PHYS236", "SYDE121"], [], [], [], [], ["In-person"], ["F", "W"], 0.5),
    "CS136": CourseNode("CS136", "012041", ["LAB", "LEC", "TST", "TUT"], "Elementary Algorithm Design and Data Abstraction", "This course builds on the techniques and patterns learned in CS 135 while making the transition to use an imperative language. It introduces the design and analysis of algorithms, the management of information, and the programming mechanisms and methodologies required in implementations. Topics discussed include iterative and recursive sorting algorithms; lists, stacks, queues, trees, and their application; abstract data types and their implementations.", [{"CS115", "CS116", "CS135", "CS145"}], ["CS137", "CS138", "CS146", "PHYS239"], [], [], [], [], ["In-person"], ["F", "W", "S"], 0.5),
    "CS136L": CourseNode("CS136L", "016330", ["LAB"], "Tools and Techniques for Software Development", "This course introduces students to tools and techniques useful in the software development lifecycle. Students learn to navigate and leverage commands and utilities in the Linux Command Line Shell. Students gain experience in version control software, writing scripts to automate tasks, and creating effective test cases to identify bugs. Tracing and debugging strategies are discussed. Students also gain experience in using built-in support for version control, testing, debugging, build automation, etc. in integrated development environments (IDEs).", [{"CS115", "CS116", "CS135", "CS145"}], [], [], [], [], [], ["In-person"], ["F", "W", "S"], 0.25),
    "CS137": CourseNode("CS137", "012886", ["LAB", "LEC", "TST", "TUT"], "Programming Principles", "Review of fundamental programming concepts and their application. Procedures and parameter passing. Arrays and structures. Recursion. Sorting. Pointers and simple dynamic structures. Space and time analysis of designs. Design methodologies.", [], [], [], [], ["Software Engineering"], [], ["In-person"], ["F"], 0.5),
    "CS138": CourseNode("CS138", "012887", ["LAB", "LEC", "TST", "TUT"], "Introduction to Data Abstraction and Implementation", "Software abstractions via elementary data structures and their implementation; encapsulation and modularity; class and interface definitions; object instantiation; recursion; elementary abstract data types, including sequences, stacks, queues, and trees; implementation using linked structures and arrays; vectors and strings; memory models; automatic vs. dynamic memory management.", ["CS137"], [], [], [], [], [], ["In-person"], ["W"], 0.5),
    "CS145": CourseNode("CS145", "012767", ["LAB", "LEC", "TST", "TUT"], "Designing Functional Programs (Advanced Level)", "CS 145 is an advanced-level version of CS 135.", [], ["CS115", "CS135", "CS137", "CS138"], [], [], [], [], ["In-person"], ["F"], 0.5),
    "CS146": CourseNode("CS146", "013657", ["LAB", "LEC", "TST", "TUT"], "Elementary Algorithm Design and Data Abstraction (Advanced Level)", "CS 146 is an advanced-level version of CS 136.", ["CS145"], ["CS116", "CS136", "CS137", "CS138"], [], [], [], [], ["In-person"], ["W"], 0.5),
    "CS200": CourseNode("CS200", "004372", ["LAB", "LEC", "TST"], "Concepts for Advanced Computer Usage", "Important concepts underlying major personal computer application categories; methodologies for learning and evaluating software; operating system and hardware design from the user's point of view, with implications for maintaining a personal computer. Students are encouraged to use their own personal computer for assignments. Social media and the effect of technology on society are explored throughout the course.", [], [], [], [], [], ["Computer Science"], ["In-person"], ["W", "S"], 0.5),
    "CS230": CourseNode("CS230", "004374", ["LAB", "LEC", "TST", "TUT"], "Introduction to Computers and Computer Systems", "Basic computer architecture, organization, system services, and software. Typology of processors, memory, I/O devices, and their performance.", [{"CS116", "CS136", "CS138", "CS146", "CS114", "CS115", "CS135"}], [], [], [], [], ["Computer Science"], ["In-person"], ["W", "S"], 0.5),
    "CS231": CourseNode("CS231", "015400", ["LAB", "LEC", "TST", "TUT"], "Algorithmic Problem Solving", "The study of the steps required to solve real-world problems on a computer, including problem specification, choice of algorithmic paradigm, analysis, and implementation. Topics include exhaustive search, divide and conquer, greedy, and dynamic programming approaches.", [{"CS116", "CS136", "CS138", "CS146", "CS114"}, {"CS115", "CS135"}], ["BME122", "CS341", "ECE250", "MSCI240", "MTE140", "SYDE223"], [], [], [], ["Computer Science"], ["In-person", "Online"], ["F", "W", "S"], 0.5),
    "CS234": CourseNode("CS234", "004375", ["LAB", "LEC", "TST"], "Data Types and Structures", "Top-down design of data structures. Using representation-independent data types. Introduction to commonly used data types, including lists, sets, mappings, and trees. Selection of data representation.", [{"CS116", "CS136", "CS138", "CS146", "CS114"}, {"CS115", "CS135"}], ["BME122", {"CS240", "CS240E"}, "ECE250", "MSCI240", "MTE140", "SYDE223"], [], [], [], ["Computer Science"], ["In-person", "Online"], ["F", "W", "S"], 0.5),
    "CS240": CourseNode("CS240", "004377", ["LAB", "LEC", "TST", "TUT"], "Data Structures and Data Management", "Introduction to widely used and effective methods of data organization, focusing on data structures, their algorithms, and the performance of these algorithms. Specific topics include priority queues, sorting, dictionaries, data structures for text processing.", [{"CS245", "CS245E", "SE212"}, {"CS241", "CS241E", "CS246", "CS246E", "CS247"}, {"STAT206", "STAT230", "STAT240"}], ["BME122", "CS234", "ECE250", "MTE140", "SYDE223"], [], [], [], ["Computer Science", "BMath (Data Science)"], ["In-person"], ["F", "W", "S"], 0.5),
    "CS240E": CourseNode("CS240E", "015405", ["LAB", "LEC", "TST", "TUT"], "Data Structures and Data Management (Enriched)", "Enriched version of CS 240.", [{"CS136", "CS138", "CS146"}, {"STAT206", "STAT230", "STAT240"}], ["CS234", "ECE250"], [], [], [], ["Computer Science", "BMath (Data Science)"], ["In-person"], ["F", "W", "S"], 0.5)

}